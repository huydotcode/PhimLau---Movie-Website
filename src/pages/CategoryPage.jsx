import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import Loading from "../components/Loading";
import MovieCard from "../components/MovieCard";
import FilterPanel from "../components/FilterPanel"; // Import FilterPanel
import { useScrollToTop } from "../hooks/useScrollToTop";
import { Pagination } from "antd"; // Import Pagination t·ª´ Ant Design
import "../styles/pagination.css"; // ƒê·∫£m b·∫£o b·∫°n c√≥ style cho Pagination

const PAGE_SIZE = 20; // S·ªë l∆∞·ª£ng phim hi·ªÉn th·ªã tr√™n m·ªói trang

const CategoryPage = () => {
  const { slug } = useParams(); // L·∫•y slug th·ªÉ lo·∫°i t·ª´ URL
  const [movies, setMovies] = useState([]);
  const [filteredResults, setFilteredResults] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [isLoading, setIsLoading] = useState(true);
  const [filters, setFilters] = useState({
    country: [], // L∆∞u nhi·ªÅu qu·ªëc gia
    // category: [],
    year: [],
    lang: [],
    type: [],
    sort: "M·ªõi nh·∫•t", // S·∫Øp x·∫øp
  });
  const [showFilters, setShowFilters] = useState(false); // State ƒë·ªÉ hi·ªÉn th·ªã b·ªô l·ªçc

  // Map slug th√†nh t√™n th·ªÉ lo·∫°i
  const categoryNameMap = {
    "chinh-kich": "Ch√≠nh k·ªãch",
    "hanh-dong": "H√†nh ƒë·ªông",
    "hai-huoc": "H√†i h∆∞·ªõc",
    "phieu-luu": "Phi√™u l∆∞u",
    "hinh-su": "H√¨nh s·ª±",
    "tinh-cam": "T√¨nh c·∫£m",
    "vien-tuong": "Vi·ªÖn t∆∞·ªüng",
    "bi-an": "B√≠ ·∫©n",
    "khoa-hoc": "Khoa h·ªçc",
    "kinh-di": "Kinh d·ªã",
  };

  const categoryName = categoryNameMap[slug] || "Th·ªÉ lo·∫°i kh√¥ng x√°c ƒë·ªãnh";

  useScrollToTop();

  useEffect(() => {
    (async () => {
      setIsLoading(true);
      try {
        const res = await fetch("/json/movies_lastest.json"); // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON
        const data = await res.json();

        // L·ªçc phim theo th·ªÉ lo·∫°i
        const categoryMovies = data.filter((movie) =>
          movie.category?.some((c) => c.slug === slug)
        );

        // S·∫Øp x·∫øp m·∫∑c ƒë·ªãnh theo "M·ªõi nh·∫•t"
        const sortedMovies = categoryMovies.sort(
          (a, b) => new Date(b.created.time) - new Date(a.created.time)
        );

        setMovies(sortedMovies); // L∆∞u danh s√°ch phim ƒë√£ s·∫Øp x·∫øp
        setFilteredResults(sortedMovies); // Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ s·∫Øp x·∫øp
      } catch (err) {
        console.error("Error fetching movies by category:", err);
      } finally {
        setIsLoading(false);
      }
    })();
  }, [slug]); // Ch·∫°y l·∫°i khi slug thay ƒë·ªïi


  const handleFilter = () => {
    let results = movies.filter((movie) => {
      // L·ªçc theo qu·ªëc gia
      const matchCountry =
        filters.country.length === 0 ||
        filters.country.some((country) =>
          movie.country?.some((c) => c.name === country)
        );

      // L·ªçc theo nƒÉm
      const matchYear =
        filters.year.length === 0 ||
        filters.year.some((year) => {
          if (year === "C≈© h∆°n") {
            return movie.year < 2020; // L·ªçc phim c√≥ nƒÉm s·∫£n xu·∫•t c≈© h∆°n 2020
          }
          return movie.year?.toString() === year;
        });

      // L·ªçc theo ng√¥n ng·ªØ
      const matchLang =
        filters.lang.length === 0 || filters.lang.includes(movie.lang);

      // L·ªçc theo lo·∫°i phim (Phim l·∫ª ho·∫∑c Phim b·ªô)
      const matchType =
        filters.type.length === 0 ||
        (filters.type.includes("Phim l·∫ª") && movie.type === "single") ||
        (filters.type.includes("Phim b·ªô") && movie.type === "series");

      return matchCountry && matchYear && matchLang && matchType;
    });

    // S·∫Øp x·∫øp k·∫øt qu·∫£
    if (filters.sort === "IMDB") {
      results = results.sort(
        (a, b) => b.tmdb.vote_average - a.tmdb.vote_average
      );
    } else if (filters.sort === "L∆∞·ª£t xem") {
      results = results.sort((a, b) => b.view - a.view);
    } else if (filters.sort === "M·ªõi nh·∫•t") {
      results = results.sort(
        (a, b) => new Date(b.created.time) - new Date(a.created.time)
      );
    }

    setFilteredResults(results);
    setCurrentPage(1);
  };

  const totalMovies = filteredResults.length;

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-4">
        Danh s√°ch phim theo th·ªÉ lo·∫°i: {categoryName}
      </h1>
      {isLoading && <Loading isLoading />}
      {!isLoading && filteredResults.length === 0 && (
        <p className="text-gray-500">
          Kh√¥ng c√≥ phim n√†o thu·ªôc th·ªÉ lo·∫°i n√†y: {categoryName}.
        </p>
      )}

      {/* N√∫t hi·ªÉn th·ªã b·ªô l·ªçc */}
      <div className="mb-6">
        <button
          className="flex items-center gap-2 px-4 py-2 bg-gray-800 text-white rounded-md"
          onClick={() => setShowFilters(!showFilters)}
        >
          <span>üîç</span> B·ªô l·ªçc
        </button>
      </div>

      {/* B·ªô l·ªçc */}
      {showFilters && (
        <FilterPanel
          filters={filters}
          setFilters={setFilters}
          handleFilter={handleFilter}
          setShowFilters={setShowFilters}

          hasCategoryFilter={false} // Kh√¥ng hi·ªÉn th·ªã b·ªô l·ªçc th·ªÉ lo·∫°i
        />
      )}

      {/* Danh s√°ch phim */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6">
        {!isLoading &&
          filteredResults
            .slice((currentPage - 1) * PAGE_SIZE, currentPage * PAGE_SIZE)
            .map((movie) => <MovieCard key={movie.slug} movie={movie} />)}
      </div>

      {/* Pagination */}
      {!isLoading && filteredResults.length > 0 && (
        <div className="mt-8 flex justify-center">
          <Pagination
            className="dark-pagination"
            current={currentPage}
            pageSize={PAGE_SIZE}
            total={totalMovies}
            onChange={handlePageChange}
            showSizeChanger={false}
            showTotal={(total) => `T·ªïng s·ªë ${total} phim`}
          />
        </div>
      )}
    </div>
  );
};

export default CategoryPage;